@page "/bloodlines"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using RPMS2025_V4.Models
@using RPMS2025_V4.Data

@using RPMS2025_V4.Repositories
@inject IBloodlineRepository _service

@rendermode InteractiveServer

<PageTitle>Bloodlines</PageTitle>

<h1>Reference File: BLOODLINES </h1>

<p>
    <a href="bloodlines/create">Create New</a>
</p>

<div class="page-size-chooser">
    Items per page:
    <select @bind="@pagination.ItemsPerPage">
        <option>5</option>
        <option>10</option>
        <option>20</option>
        <option>50</option>
    </select>
</div>

<h3>Maintain reference file - Bloodlines</h3>

<div>
    <label for="rowsPerPage">Rows per page:</label>
    <input type="number" id="rowsPerPage" @bind="pagination.ItemsPerPage" min="5" @bind:event="onchange"  />
</div>

<QuickGrid Class="table" Items="bloodlines" Pagination="pagination" >
    <PropertyColumn Property="bloodline => bloodline.Code" Title="Code" Sortable="true" >
        <ColumnOptions>
            <div>
                <label for="filterCode">Filter by Code:</label>
                <input type="text" id="filterCode" @bind="filterCode" @bind:event="OnFilterChanged" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="bloodline => bloodline.Desc" Title="Description" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Ascending">
        <ColumnOptions>
            <div>
                <label for="filterDesc">Filter by Description:</label>
                <input type="text" id="filterDesc" @bind="filterDesc" @bind:event="oninput" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="bloodline => bloodline.Status" Title="Status" Sortable="true">
   @*     <ColumnOptions>
            <div>
                <label for="filterStatus">Filter by Status:</label>
                <input type="text" id="filterStatus" @bind="filterStatus" @bind:event="OnFilterChanged" />
            </div>
        </ColumnOptions>*@
    </PropertyColumn>
    <PropertyColumn Property="bloodline => bloodline.System" Title="Sys">
        @*        <ColumnOptions>
            <div>
                <label for="filterSystem">Filter by System:</label>
                <input type="checkbox" id="filterSystem" @bind="filterSystem" />
            </div>
        </ColumnOptions> *@
    </PropertyColumn>
    <PropertyColumn Property="bloodline => bloodline.Rating" Title="Bloodline Rating" Sortable="true" Align="Align.Right">
        @*       <ColumnOptions>
            <div>
                <label for="filterRating">Filter by Bloodline Rating:</label>
                <input type="number" id="filterRating" @bind="filterRating" />
            </div>
        </ColumnOptions>*@
    </PropertyColumn>
    <TemplateColumn Context="bloodline">
        <a href="@($"bloodlines/edit?id={bloodline.ID}")">Edit</a> |
        <a href="@($"bloodlines/details?id={bloodline.ID}")">Details</a> |
        <a href="@($"bloodlines/delete?id={bloodline.ID}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="@pagination" />

@code {
    private string filterCode = string.Empty;
    private string filterDesc = string.Empty;
    private string filterStatus = string.Empty;
    private bool filterSystem = false;
    private int? filterRating = null;

    IQueryable<Bloodline> bloodlines;

    public string? Message { get; set; }
    QuickGrid<Bloodline>? grid;

    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };


    protected override async Task OnInitializedAsync()
    {
        var result = await _service.Read();
        bloodlines = result.AsQueryable();
    }

    private IEnumerable<Bloodline> filteredBloodlines => bloodlines
       .Where(b => string.IsNullOrEmpty(filterCode) || b.Code.Contains(filterCode, StringComparison.OrdinalIgnoreCase))
       .Where(b => string.IsNullOrEmpty(filterDesc) || b.Desc.Contains(filterDesc, StringComparison.OrdinalIgnoreCase));
    //   .Where(b => string.IsNullOrEmpty(filterStatus) || b.Status.Contains(filterStatus, StringComparison.OrdinalIgnoreCase));
    //.Where(b => !filterSystem || b.System == filterSystem)
       //.Where(b => !filterRating.HasValue || b.Rating == filterRating);
 
       private void OnFilterChanged(ChangeEventArgs e)
    {
        StateHasChanged();
        grid!.RefreshDataAsync();
    }

    Task FilterChangedAsync()
        => grid!.RefreshDataAsync();
}
